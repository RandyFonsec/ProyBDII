--POSTGRESQL VENTAS
Drop DATABASE Sales;


-- Conectar a la base de datos "Sales"
CREATE DATABASE Sales;
-- Habilitar la extensión PostGIS
CREATE EXTENSION IF NOT EXISTS postgis;

\c sales;



DROP TABLE IF EXISTS OrderState;
DROP TABLE IF EXISTS ProductsByOrder;
DROP TABLE IF EXISTS "Order";

CREATE TABLE OrderState (
    order_state_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    deleted BOOLEAN
);

CREATE TABLE "Order" (
    order_id SERIAL PRIMARY KEY,
    client_id INT,
    state_id INT,
    reviewed_by INT,
    date DATE
);

CREATE TABLE ProductsByOrder (
    order_id INT,
    product_id VARCHAR(128),
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES "Order" (order_id)
);


INSERT INTO OrderState (name, deleted) VALUES
    ('Solicitada', false),
    ('En traslado', false),
	('Rechazada', false);

INSERT INTO "Order" (client_id, state_id, reviewed_by, date) VALUES
    (1, 1, 0, '2023-01-15'),
    (1, 2, 0, '2023-02-20'),
    (2, 1, 0, '2023-03-25');

INSERT INTO ProductsByOrder (order_id, product_id, quantity) VALUES 
(1, 'FGE789', 5),
(1, 'FGE789', 10),
(2, HMR123', 8),
(3, 'HMR123', 3),
(3, 'HMR456', 6);


-- Debe ser con funcion para retornar tabla
-- Retorna ordenes pendientes
CREATE OR REPLACE FUNCTION get_orders()
RETURNS TABLE (
    order_id INT,
    client_id INT,
    state_id INT,
    reviewed_by INT,
    date DATE
) AS $$
BEGIN
    RETURN QUERY
    SELECT "Order".order_id, "Order".client_id, "Order".state_id, "Order".reviewed_by, "Order".date
    FROM "Order"
    WHERE "Order".state_id = 1
	ORDER BY "Order".date ASC;
END;
$$ LANGUAGE plpgsql;

SELECT * FROM get_orders();



-- Codigos de productos unicos de una orden
DROP FUNCTION  get_products_by_order(in_order_id INT)

CREATE OR REPLACE FUNCTION get_products_by_order(in_order_id INT)
RETURNS TABLE (
    product_id VARCHAR,
    quantity INT
) AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM "Order" WHERE "Order".order_id = in_order_id) THEN
        RAISE EXCEPTION 'El order_id % no es válido.', in_order_id;
    END IF;

    RETURN QUERY
    SELECT PB.product_id, PB.quantity
    FROM ProductsByOrder AS PB
    WHERE PB.order_id = in_order_id;
END;
$$ LANGUAGE plpgsql;


SELECT * FROM get_products_by_order(1); 






-- Prioridad de envío

DROP  FUNCTION insertar_ubicaciones;
DELETE FROM ubicaciones;
CREATE OR REPLACE FUNCTION insertar_ubicaciones(
  ubicaciones JSONB[], 
  client_lat FLOAT, 
  client_long FLOAT
)
RETURNS TABLE (
    wh_id INT,
    distance FLOAT
) AS $$
BEGIN
 DELETE FROM ubicaciones;
  -- Insertar nuevas ubicaciones
  INSERT INTO ubicaciones (wh_id, longitude, latitude)
  SELECT 
    (item->>'wh_id')::INT, 
    (item->>'longitude')::FLOAT, 
    (item->>'latitude')::FLOAT
  FROM unnest(ubicaciones) AS item;

  -- Seleccionar datos con cálculos adicionales
  RETURN QUERY
  SELECT 
    u.wh_id,
    ST_Distance(ST_MakePoint(u.longitude, u.latitude), ST_MakePoint(client_long, client_lat)) AS distance
  FROM ubicaciones AS u
  ORDER BY distance ASC;
  
END;
$$ LANGUAGE plpgsql;











CREATE USER user_sales WITH PASSWORD '1234';

GRANT CONNECT ON DATABASE sales TO user_sales;
GRANT SELECT ON TABLE "Order" TO user_sales;

GRANT EXECUTE ON FUNCTION get_products_by_order(integer) TO user_sales;
GRANT SELECT ON TABLE ProductsByOrder TO user_sales;

GRANT EXECUTE ON FUNCTION  insertar_ubicaciones(jsonb[]) TO user_sales;
GRANT INSERT ON TABLE ubicaciones TO user_sales;
GRANT DELETE ON TABLE ubicaciones TO user_sales;


